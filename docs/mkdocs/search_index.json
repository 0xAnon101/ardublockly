{
    "docs": [
        {
            "location": "/Home/",
            "text": "Welcome to the ardublockly wiki!\n\n\nThe documentation is currently under work. Links to the available pages can be found on the right side navigation box.",
            "title": "Home"
        },
        {
            "location": "/Home/#welcome-to-the-ardublockly-wiki",
            "text": "The documentation is currently under work. Links to the available pages can be found on the right side navigation box.",
            "title": "Welcome to the ardublockly wiki!"
        },
        {
            "location": "/Quick-Start/",
            "text": "Quick Start\n\n\nThis wiki article is still under development",
            "title": "Quick Start"
        },
        {
            "location": "/Quick-Start/#quick-start",
            "text": "This wiki article is still under development",
            "title": "Quick Start"
        },
        {
            "location": "/Installing-Ardublockly/",
            "text": "Install Ardublockly\n\n\nThere are two ways to run Ardublockly.\n\n\na) Run the executable application: Simplest method, download a zip file which contains the pre-packaged Ardublockly executable software.\n\n\nb) Run the \"core version\": Running from source code, requires only Python and a browser (like Chrome or Firefox).\n\n\nBoth these methods can be run from the \"pre-packaged\" download, and the GitHub repository source code.\n\n\nInstall packaged Ardublockly\n\n\nThe easiest way to use Ardublockly is to download the packaged version, which is a self-contained application that does not have any other dependencies (other than having the Arduino IDE installed).\n\n\nYou can download the latest stable version in the \nreleases\n section of this repository.\n\n\nDevelopment builds of packaged Ardublockly\n\n\nAdditionally, development builds with the latest features still under development can be found in the links below. The Windows version works in both 32 and 64 bit of windows 7 and higher. The Linux version works only on x64, built on Ubuntu 12.04. The Mac OS X version works on 10.8 Mountain Lion or higher.\n\n\nhttp://ardublockly-builds.s3-website-us-west-2.amazonaws.com/index.html\n\n\n\n\n\n\n\n\nLinux build\n\n\nWindows build\n\n\nMac OS X build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownload Link\n\n\nDownload Link\n\n\nDownload Link\n\n\n\n\n\n\n\n\nFor any these and other platforms, the \"core version\" should work on all operating systems with Python and a modern web browser. \n\n\nRun the packaged Ardublockly\n\n\nTo run the application the steps are slightly different depending on the platform.\n\n\n\n\nWindows\n: Double click on the \nardublockly_run.bat\n file located on the Ardublockly folder.\n\n\nLinux\n: Execute the \nardublockly_run.sh\n shell script located on the Ardublockly folder.\n\n\nOS X\n: Right click the \nArdublockly.app\n file and click \nopen\n.\n\n\n\n\n\n\nThe Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the \nConfigure Ardublockly page\n.\n\n\nInstall from Ardublockly source code\n\n\nOften referred as the \"core version\" of Ardublockly, this version is the main development environment for the application. You can easily run the latest updates using this method, and should still be able to work if there is an issue with the packed Ardublockly software on your environment. \n\n\nRequired Software\n\n\n\n\nPython 2.7.x\n: Ardublockly is maintains compatibility with 3.x, but is mainly developed using Python 2\n\n\nArduino IDE version 1.6 or higher\n: The latest version is always recommended\n\n\nModern browser of your choice: Currently supports Firefox, Chrome, IE10+, Opera and Safari; Chrome is recommended\n\n\nArdublockly source code: The \"Downloading Ardublockly\" section details how to obtain it\n\n\nGit\n: It is not strictly required for downloading the source code, but it simplifies the process\n\n\n\n\nLinux only requirement\n\n\nTkinter, which is used in Ardublockly, is not always part of standard Python environment on Linux and needs to be installed.\n\n\nInstall Tkinter for Python 2 on Ubuntu:\n\n\nsudo apt-get install python-tk\n\n\n\n\nOR, install Tkinter for Python 3 on Ubuntu:\n\n\nsudo apt-get install python3-tk\n\n\n\n\nDownloading Ardublockly\n\n\nThe easiest way to download a working copy of the repository is using git:\n\n\ngit clone https://github.com/carlosperate/ardublockly.git\ncd ardublockly\ngit submodule update --init --recursive\n\n\n\n\nWhen the repository is downloaded \ndirectly from github as zip file\n, the internal git submodules are not included, which is why git is the best method to download a working copy.\n\n\nDownload without git\n\n\nIf for some reason you are unable to use git, you can download \nArdublockly from GitHub as zip file\n and the \nClosure library as a zip file\n. Uncompress the contents from the Ardublockly zip file and then unzip the Closure library into the \nclosure-library\n folder within Ardublockly (make sure there is not an additional \"closure-library\" nested folder inside this one).\n\n\nIf you also need to build Ardublockly locally (which is not necessary to run the development version), all the git submodules required are listed in the \n.gitmodules file in the repository\n.\n\n\nRun Ardublockly from source code\n\n\nTo run the \"core version\" execute the \nstart.py\n python script file located on the the root of the Ardublockly folder (this also works on the \"packaged\" Ardublockly version):\n\n\npython start.py\n\n\n\n\nYour default browser should open a local web page to load the Ardublockly application.\n\n\n\n\nThe Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the \nConfigure Ardublockly page\n.\n\n\nRun the full Ardublockly desktop application from source\n\n\nTo run the full desktop version of the development Ardublockly you will also need to install \nnode.js\n.\n\n\nNavigate to the \nelectron\n folder inside the \npackage\n directory:\n\n\ncd package\\electron\n\n\n\n\nExecute the following command to download all the dependencies required to for the desktop application, this might take a while:\n\n\nnpm install\n\n\n\n\nOnce that's done, run the following command to open the desktop application:\n\n\nnpm start\n\n\n\n\nThe Arduino IDE is still required to compile and load the programs into an Arduino board, more information can be found in the \nConfigure Ardublockly page\n.",
            "title": "Installing Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#install-ardublockly",
            "text": "There are two ways to run Ardublockly.  a) Run the executable application: Simplest method, download a zip file which contains the pre-packaged Ardublockly executable software.  b) Run the \"core version\": Running from source code, requires only Python and a browser (like Chrome or Firefox).  Both these methods can be run from the \"pre-packaged\" download, and the GitHub repository source code.",
            "title": "Install Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#install-packaged-ardublockly",
            "text": "The easiest way to use Ardublockly is to download the packaged version, which is a self-contained application that does not have any other dependencies (other than having the Arduino IDE installed).  You can download the latest stable version in the  releases  section of this repository.",
            "title": "Install packaged Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#development-builds-of-packaged-ardublockly",
            "text": "Additionally, development builds with the latest features still under development can be found in the links below. The Windows version works in both 32 and 64 bit of windows 7 and higher. The Linux version works only on x64, built on Ubuntu 12.04. The Mac OS X version works on 10.8 Mountain Lion or higher.  http://ardublockly-builds.s3-website-us-west-2.amazonaws.com/index.html     Linux build  Windows build  Mac OS X build           Download Link  Download Link  Download Link     For any these and other platforms, the \"core version\" should work on all operating systems with Python and a modern web browser.",
            "title": "Development builds of packaged Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#run-the-packaged-ardublockly",
            "text": "To run the application the steps are slightly different depending on the platform.   Windows : Double click on the  ardublockly_run.bat  file located on the Ardublockly folder.  Linux : Execute the  ardublockly_run.sh  shell script located on the Ardublockly folder.  OS X : Right click the  Ardublockly.app  file and click  open .    The Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the  Configure Ardublockly page .",
            "title": "Run the packaged Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#install-from-ardublockly-source-code",
            "text": "Often referred as the \"core version\" of Ardublockly, this version is the main development environment for the application. You can easily run the latest updates using this method, and should still be able to work if there is an issue with the packed Ardublockly software on your environment.",
            "title": "Install from Ardublockly source code"
        },
        {
            "location": "/Installing-Ardublockly/#required-software",
            "text": "Python 2.7.x : Ardublockly is maintains compatibility with 3.x, but is mainly developed using Python 2  Arduino IDE version 1.6 or higher : The latest version is always recommended  Modern browser of your choice: Currently supports Firefox, Chrome, IE10+, Opera and Safari; Chrome is recommended  Ardublockly source code: The \"Downloading Ardublockly\" section details how to obtain it  Git : It is not strictly required for downloading the source code, but it simplifies the process",
            "title": "Required Software"
        },
        {
            "location": "/Installing-Ardublockly/#linux-only-requirement",
            "text": "Tkinter, which is used in Ardublockly, is not always part of standard Python environment on Linux and needs to be installed.  Install Tkinter for Python 2 on Ubuntu:  sudo apt-get install python-tk  OR, install Tkinter for Python 3 on Ubuntu:  sudo apt-get install python3-tk",
            "title": "Linux only requirement"
        },
        {
            "location": "/Installing-Ardublockly/#downloading-ardublockly",
            "text": "The easiest way to download a working copy of the repository is using git:  git clone https://github.com/carlosperate/ardublockly.git\ncd ardublockly\ngit submodule update --init --recursive  When the repository is downloaded  directly from github as zip file , the internal git submodules are not included, which is why git is the best method to download a working copy.",
            "title": "Downloading Ardublockly"
        },
        {
            "location": "/Installing-Ardublockly/#download-without-git",
            "text": "If for some reason you are unable to use git, you can download  Ardublockly from GitHub as zip file  and the  Closure library as a zip file . Uncompress the contents from the Ardublockly zip file and then unzip the Closure library into the  closure-library  folder within Ardublockly (make sure there is not an additional \"closure-library\" nested folder inside this one).  If you also need to build Ardublockly locally (which is not necessary to run the development version), all the git submodules required are listed in the  .gitmodules file in the repository .",
            "title": "Download without git"
        },
        {
            "location": "/Installing-Ardublockly/#run-ardublockly-from-source-code",
            "text": "To run the \"core version\" execute the  start.py  python script file located on the the root of the Ardublockly folder (this also works on the \"packaged\" Ardublockly version):  python start.py  Your default browser should open a local web page to load the Ardublockly application.   The Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the  Configure Ardublockly page .",
            "title": "Run Ardublockly from source code"
        },
        {
            "location": "/Installing-Ardublockly/#run-the-full-ardublockly-desktop-application-from-source",
            "text": "To run the full desktop version of the development Ardublockly you will also need to install  node.js .  Navigate to the  electron  folder inside the  package  directory:  cd package\\electron  Execute the following command to download all the dependencies required to for the desktop application, this might take a while:  npm install  Once that's done, run the following command to open the desktop application:  npm start  The Arduino IDE is still required to compile and load the programs into an Arduino board, more information can be found in the  Configure Ardublockly page .",
            "title": "Run the full Ardublockly desktop application from source"
        },
        {
            "location": "/Configure-Ardublockly/",
            "text": "This is a placeholder page, instructions will be coming soon\n\n\nIf you have an urgency to use this part of the documentation please \ncreate a new an issue\n and I will prioritize it",
            "title": "Configure Ardublockly"
        },
        {
            "location": "/Arduino-Compiler-Settings/",
            "text": "This part of the documentation is not complete.\n\n\nCompiler Settings\n\n\nIntroduction still needs to be written. Mention:\n\n\n \nPython module\n\n\n \nDisplay of settings on the CLI\n\n\n \nSettings file*\n\n\nSettings file\n\n\nDescribe file location\n\n\nDescribe use of ConfigParser\n\n\nDescribe possible options, list defaults\n\n\n[Arduino_IDE]\narduino_exec_path = C:/IDEs/arduino-1.6/arduino_debug.exe\narduino_board = Uno\narduino_serial_port = COM1\n\n[Arduino_Sketch]\nsketch_name = ArdublocklySketch\nsketch_directory = G:/git/ardublockly\n\n\n\n\nWeb interface\n\n\nGeneral description about viewing and changing settings in Ardublockly WebApp\n\n\nSettings Ajax calls\n\n\nGeneral description including documentation about how to use them\n\n\nFuture implementation\n\n\nBrief list of things to implement in this module",
            "title": "Arduino Compiler Settings"
        },
        {
            "location": "/Arduino-Compiler-Settings/#compiler-settings",
            "text": "Introduction still needs to be written. Mention:    Python module    Display of settings on the CLI    Settings file*",
            "title": "Compiler Settings"
        },
        {
            "location": "/Arduino-Compiler-Settings/#settings-file",
            "text": "Describe file location  Describe use of ConfigParser  Describe possible options, list defaults  [Arduino_IDE]\narduino_exec_path = C:/IDEs/arduino-1.6/arduino_debug.exe\narduino_board = Uno\narduino_serial_port = COM1\n\n[Arduino_Sketch]\nsketch_name = ArdublocklySketch\nsketch_directory = G:/git/ardublockly",
            "title": "Settings file"
        },
        {
            "location": "/Arduino-Compiler-Settings/#web-interface",
            "text": "General description about viewing and changing settings in Ardublockly WebApp",
            "title": "Web interface"
        },
        {
            "location": "/Arduino-Compiler-Settings/#settings-ajax-calls",
            "text": "General description including documentation about how to use them",
            "title": "Settings Ajax calls"
        },
        {
            "location": "/Arduino-Compiler-Settings/#future-implementation",
            "text": "Brief list of things to implement in this module",
            "title": "Future implementation"
        },
        {
            "location": "/Building-Ardublockly/",
            "text": "Building Ardublockly\n\n\nThe package folder contains the Python scripts required to package Ardublockly into a standalone executable. This way it can be distributed without any dependencies other than having the Arduino IDE.\n\n\nThe application can be categorised in three main components: Python server, HTML/Javascript front end, and a desktop application wrapper.\n\n\nCurrently the Python server is packaged using py2exe for Windows, and PyInstaller for Linux and Mac OS X. In the future PyInstaller might be updated to also create the Windows builds, for now the original py2exe script is pretty stable.\n\n\nThe desktop wrapper is based on Electron, which uses node.js. The node.js component is only used where required for the application to integrate well with the individual desktop platforms. Originally the Chromium Embedded Framework Python bindings were used, but cross-platform maintenance proved to be problematic and Electron has provided a much smother alternative.\n\n\nDownload the packaged Ardublockly\n\n\nThe stable binaries for Windows, Linux, and Mac OS X are hosted in GitHub as part of the \nrepository releases\n.\n\n\nDevelopment builds are triggered in the CI build servers on each git commit and are hosted in the following links:\n\n\n\n\n\n\n\n\nLinux build\n\n\nWindows build\n\n\nMac OS X build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownload Link\n\n\nDownload Link\n\n\nDownload Link\n\n\n\n\n\n\n\n\nArdublockly executable build dependencies\n\n\nGit\n\n\nGit needs to be installed on the system and accessible through the command line interface.\n\n\nPython\n\n\nThese build scripts have been developed and tested only on Python 2.7.\n\n\nWhile the non-GUI version of Ardublockly (command line server + browser-based GUI) is compatible with other Python versions (tested on Python 2.7 and 3.4), due to the individual quirks of the python libraries used here and initial unavailability of some Python 3 bindings, a single build environment based on Python 2.7 has been be targeted.\n\n\nIf you are using Python virtual environments on Windows this \ncollection of Python extensions binaries\n is highly recommended.\n\n\nThe specific versions of the Python dependencies can be found in the \nrequirements.txt\n file.\n\n\npy2exe\n\n\npy2exe is a Distutils extension to build Python scripts into Windows executable programs.\n\n\nThis package is only required for the Windows build. The Linux and Mac OS X builds use the PyInstaller scripts included in this folder.\n\n\nYou can download py2exe from their \nofficial website\n.\n\n\nPyInstaller\n\n\nConverts (packages) Python programs into stand-alone executables, used for the Linux and Mac OS X builds.\n\n\nPyInstaller\n can be easily installed using pip:\n\n\n pip install pyinstaller\n\n\n\n\nMkDocs\n\n\nMkDocs\n is a static page generator specifically designed for documentation using Markdown.\n\n\nThe project documentation is written and hosted in the \nArdublockly GitHub Wiki\n. The build script for the documentation pulls its markdown files and converts them into an HTML static site for offline access.\n\n\nMore information about this procedure can be found on \nthis article\n.\n\n\nMkDocs can be easily installed using pip:\n\n\npip install MkDocs\n\n\n\n\nNode.js\n\n\nNode.js is required to run \nElectron\n. It can be downloaded from the \nofficial website\n.\n\n\nThe \nnpm\n package manager should be included with node, which is used to deal with all the Electron application dependencies.\n\n\nBuild Instructions\n\n\nDownload and initialise this project repository:\n\n\ngit clone https://github.com/carlosperate/ardublockly.git\ncd ardublockly\ngit submodule update --init --recursive\n\n\n\n\nIf you have already downloaded the Ardublockly source code, make sure the submodules are initialised, in this case the 'closure-library' in the project root directory, and 'ardublockly.wiki' in the 'package/ardublocklydocs/' folder. You can run the last git command above in the project root directory to ensure this is the case, otherwise the submodules directories will be empty.\n\n\nFirst step: Python server (platform dependent)\n\n\nThe build steps for the Ardublockly Server are slightly different depending on the platform.\n\n\nWindows Build\n\n\nTo build Ardublockly under Windows all you have to do is execute the \nbuild_windows.py\n file from the project root directory:\n\n\npython package\\build_py2exe.py\n\n\n\n\nThis will remove any previous build directory, rebuild, and create the \nardublockly_run.bat\n file into the project root.\n\n\nLinux Build\n\n\nTo build Ardublockly under Linux all you have to do is execute the \nbuild_pyinstaller.py\n file from the project root directory:\n\n\npython package/build_pyinstaller.py\n\n\n\n\nThe optional command line argument \nlinux\n can be provided, but the operating systems should be automatically detected.\n\n\nThis will remove any previous build directory, rebuild, and create the \nardublockly_run.sh\n file into the project root.\n\n\nMac OS X Build\n\n\nTo build Ardublockly under Mac OS X all you have to do is execute the \nbuild_pyinstaller.py\n file from the project root directory:\n\n\npython package/build_pyinstaller.py\n\n\n\n\nThe optional command line argument \nmac\n can be provided, but the operating systems should be automatically detected.\n\n\nThis will remove any previous build directory, and rebuild it.\n\n\nSecond step: Electron (platform independent)\n\n\nExecute the following commands from the project root directory:\n\n\ncd package\\electron\nnpm install\nnpm run release\n\n\n\n\nThe npm scripts will automatically detect and deal with the operating system different build requirements.\n\n\nAt this point, if continuing with the next steps, is recommended to go back to the project root directory:\n\n\ncd ../../\n\n\n\n\nThird step: Documentation (platform independent)\n\n\nBuild the offline documentation by running the \nbuild_docs.py\n script from the project root directory:\n\n\npython package\\build_docs.py\n\n\n\n\nThis will remove any previous build directory, rebuild it, and remove any temporary files.\n\n\nFinal Step: Packing all Ardublockly (platform independent)\n\n\nThis step is only meant if you wish to pack the Ardublockly application into a distributable form. You can pack Ardublockly running the following command from the project root directory:\n\n\npython package/pack_ardublockly.py\n\n\n\n\nThe pack script is designed for the build servers to zip the required contents into a single file to be uploaded to cloud storage, so it does not pack all the repository source code. This script creates a new folder on the same level a the project root, and then zips it and saves it into the folder 'upload' within the project root.",
            "title": "Building Ardublockly"
        },
        {
            "location": "/Building-Ardublockly/#building-ardublockly",
            "text": "The package folder contains the Python scripts required to package Ardublockly into a standalone executable. This way it can be distributed without any dependencies other than having the Arduino IDE.  The application can be categorised in three main components: Python server, HTML/Javascript front end, and a desktop application wrapper.  Currently the Python server is packaged using py2exe for Windows, and PyInstaller for Linux and Mac OS X. In the future PyInstaller might be updated to also create the Windows builds, for now the original py2exe script is pretty stable.  The desktop wrapper is based on Electron, which uses node.js. The node.js component is only used where required for the application to integrate well with the individual desktop platforms. Originally the Chromium Embedded Framework Python bindings were used, but cross-platform maintenance proved to be problematic and Electron has provided a much smother alternative.",
            "title": "Building Ardublockly"
        },
        {
            "location": "/Building-Ardublockly/#download-the-packaged-ardublockly",
            "text": "The stable binaries for Windows, Linux, and Mac OS X are hosted in GitHub as part of the  repository releases .  Development builds are triggered in the CI build servers on each git commit and are hosted in the following links:     Linux build  Windows build  Mac OS X build           Download Link  Download Link  Download Link",
            "title": "Download the packaged Ardublockly"
        },
        {
            "location": "/Building-Ardublockly/#ardublockly-executable-build-dependencies",
            "text": "",
            "title": "Ardublockly executable build dependencies"
        },
        {
            "location": "/Building-Ardublockly/#git",
            "text": "Git needs to be installed on the system and accessible through the command line interface.",
            "title": "Git"
        },
        {
            "location": "/Building-Ardublockly/#python",
            "text": "These build scripts have been developed and tested only on Python 2.7.  While the non-GUI version of Ardublockly (command line server + browser-based GUI) is compatible with other Python versions (tested on Python 2.7 and 3.4), due to the individual quirks of the python libraries used here and initial unavailability of some Python 3 bindings, a single build environment based on Python 2.7 has been be targeted.  If you are using Python virtual environments on Windows this  collection of Python extensions binaries  is highly recommended.  The specific versions of the Python dependencies can be found in the  requirements.txt  file.",
            "title": "Python"
        },
        {
            "location": "/Building-Ardublockly/#py2exe",
            "text": "py2exe is a Distutils extension to build Python scripts into Windows executable programs.  This package is only required for the Windows build. The Linux and Mac OS X builds use the PyInstaller scripts included in this folder.  You can download py2exe from their  official website .",
            "title": "py2exe"
        },
        {
            "location": "/Building-Ardublockly/#pyinstaller",
            "text": "Converts (packages) Python programs into stand-alone executables, used for the Linux and Mac OS X builds.  PyInstaller  can be easily installed using pip:   pip install pyinstaller",
            "title": "PyInstaller"
        },
        {
            "location": "/Building-Ardublockly/#mkdocs",
            "text": "MkDocs  is a static page generator specifically designed for documentation using Markdown.  The project documentation is written and hosted in the  Ardublockly GitHub Wiki . The build script for the documentation pulls its markdown files and converts them into an HTML static site for offline access.  More information about this procedure can be found on  this article .  MkDocs can be easily installed using pip:  pip install MkDocs",
            "title": "MkDocs"
        },
        {
            "location": "/Building-Ardublockly/#nodejs",
            "text": "Node.js is required to run  Electron . It can be downloaded from the  official website .  The  npm  package manager should be included with node, which is used to deal with all the Electron application dependencies.",
            "title": "Node.js"
        },
        {
            "location": "/Building-Ardublockly/#build-instructions",
            "text": "Download and initialise this project repository:  git clone https://github.com/carlosperate/ardublockly.git\ncd ardublockly\ngit submodule update --init --recursive  If you have already downloaded the Ardublockly source code, make sure the submodules are initialised, in this case the 'closure-library' in the project root directory, and 'ardublockly.wiki' in the 'package/ardublocklydocs/' folder. You can run the last git command above in the project root directory to ensure this is the case, otherwise the submodules directories will be empty.",
            "title": "Build Instructions"
        },
        {
            "location": "/Building-Ardublockly/#first-step-python-server-platform-dependent",
            "text": "The build steps for the Ardublockly Server are slightly different depending on the platform.",
            "title": "First step: Python server (platform dependent)"
        },
        {
            "location": "/Building-Ardublockly/#windows-build",
            "text": "To build Ardublockly under Windows all you have to do is execute the  build_windows.py  file from the project root directory:  python package\\build_py2exe.py  This will remove any previous build directory, rebuild, and create the  ardublockly_run.bat  file into the project root.",
            "title": "Windows Build"
        },
        {
            "location": "/Building-Ardublockly/#linux-build",
            "text": "To build Ardublockly under Linux all you have to do is execute the  build_pyinstaller.py  file from the project root directory:  python package/build_pyinstaller.py  The optional command line argument  linux  can be provided, but the operating systems should be automatically detected.  This will remove any previous build directory, rebuild, and create the  ardublockly_run.sh  file into the project root.",
            "title": "Linux Build"
        },
        {
            "location": "/Building-Ardublockly/#mac-os-x-build",
            "text": "To build Ardublockly under Mac OS X all you have to do is execute the  build_pyinstaller.py  file from the project root directory:  python package/build_pyinstaller.py  The optional command line argument  mac  can be provided, but the operating systems should be automatically detected.  This will remove any previous build directory, and rebuild it.",
            "title": "Mac OS X Build"
        },
        {
            "location": "/Building-Ardublockly/#second-step-electron-platform-independent",
            "text": "Execute the following commands from the project root directory:  cd package\\electron\nnpm install\nnpm run release  The npm scripts will automatically detect and deal with the operating system different build requirements.  At this point, if continuing with the next steps, is recommended to go back to the project root directory:  cd ../../",
            "title": "Second step: Electron (platform independent)"
        },
        {
            "location": "/Building-Ardublockly/#third-step-documentation-platform-independent",
            "text": "Build the offline documentation by running the  build_docs.py  script from the project root directory:  python package\\build_docs.py  This will remove any previous build directory, rebuild it, and remove any temporary files.",
            "title": "Third step: Documentation (platform independent)"
        },
        {
            "location": "/Building-Ardublockly/#final-step-packing-all-ardublockly-platform-independent",
            "text": "This step is only meant if you wish to pack the Ardublockly application into a distributable form. You can pack Ardublockly running the following command from the project root directory:  python package/pack_ardublockly.py  The pack script is designed for the build servers to zip the required contents into a single file to be uploaded to cloud storage, so it does not pack all the repository source code. This script creates a new folder on the same level a the project root, and then zips it and saves it into the folder 'upload' within the project root.",
            "title": "Final Step: Packing all Ardublockly (platform independent)"
        },
        {
            "location": "/Runninng-Uncompressed-Ardublockly/",
            "text": "Runninng Uncompressed Ardublockly Blockly\n\n\nDuring development you could implement your changes to the source files and re-build each time (using the \nBuilding Ardublockly\n instructions), however the code is minified and would be quite hard to debug. For that reason it is highly encouraged to use the uncompressed version of Blockly used in Ardublockly. \n\n\nTo do so, the \n/ardublockly/index.html\n file already contains the required sources commented out. Simply modified the following from:\n\n\n  \n!-- Ardublockly - These three files contain the compress version --\n\n  \nscript src=\n../blockly/blockly_compressed.js\n/script\n\n  \nscript src=\n../blockly/blocks_compressed.js\n/script\n\n  \nscript src=\n../blockly/arduino_compressed.js\n/script\n\n  \n!-- To use the uncompressed version comment out the above and comment in the ones below --\n\n  \n!--script src=\n../blockly/blockly_uncompressed.js\n/script\n\n  \nscript src=\n../blockly/blocks/logic.js\n/script\n\n  \nscript src=\n../blockly/blocks/loops.js\n/script\n\n  \nscript src=\n../blockly/blocks/math.js\n/script\n\n  \nscript src=\n../blockly/blocks/text.js\n/script\n\n  \nscript src=\n../blockly/blocks/lists.js\n/script\n\n  \nscript src=\n../blockly/blocks/colour.js\n/script\n\n  \nscript src=\n../blockly/blocks/variables.js\n/script\n\n  \nscript src=\n../blockly/blocks/procedures.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/io.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/map.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/procedures.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/serial.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/servo.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/spi.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/stepper.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/time.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/tone.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/variables.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/boards.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/io.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/lists.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/logic.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/loops.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/map.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/math.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/procedures.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/serial.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/servo.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/spi.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/stepper.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/text.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/time.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/tone.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/variables.js\n/script--\n\n\n\n\n\nTo:\n\n\n  \n!-- Ardublockly - These three files contain the compress version --\n\n  \n!--script src=\n../blockly/blockly_compressed.js\n/script\n\n  \nscript src=\n../blockly/blocks_compressed.js\n/script\n\n  \nscript src=\n../blockly/arduino_compressed.js\n/script--\n\n  \n!-- To use the uncompressed version comment out the above and comment in the ones below --\n\n  \nscript src=\n../blockly/blockly_uncompressed.js\n/script\n\n  \nscript src=\n../blockly/blocks/logic.js\n/script\n\n  \nscript src=\n../blockly/blocks/loops.js\n/script\n\n  \nscript src=\n../blockly/blocks/math.js\n/script\n\n  \nscript src=\n../blockly/blocks/text.js\n/script\n\n  \nscript src=\n../blockly/blocks/lists.js\n/script\n\n  \nscript src=\n../blockly/blocks/colour.js\n/script\n\n  \nscript src=\n../blockly/blocks/variables.js\n/script\n\n  \nscript src=\n../blockly/blocks/procedures.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/io.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/map.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/procedures.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/serial.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/servo.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/spi.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/stepper.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/time.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/tone.js\n/script\n\n  \nscript src=\n../blockly/blocks/arduino/variables.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/boards.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/io.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/lists.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/logic.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/loops.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/map.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/math.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/procedures.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/serial.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/servo.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/spi.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/stepper.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/text.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/time.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/tone.js\n/script\n\n  \nscript src=\n../blockly/generators/arduino/variables.js\n/script\n\n\n\n\n\nKeep in mind that any additional block file would have to to be added as a new \nscript\n import.\n\n\nAlso remember to do hard refresh in-between changes to ensure your browser is not using cached old versions of the JavaScript files.",
            "title": "Runninng Uncompressed Ardublockly"
        },
        {
            "location": "/Runninng-Uncompressed-Ardublockly/#runninng-uncompressed-ardublockly-blockly",
            "text": "During development you could implement your changes to the source files and re-build each time (using the  Building Ardublockly  instructions), however the code is minified and would be quite hard to debug. For that reason it is highly encouraged to use the uncompressed version of Blockly used in Ardublockly.   To do so, the  /ardublockly/index.html  file already contains the required sources commented out. Simply modified the following from:     !-- Ardublockly - These three files contain the compress version -- \n   script src= ../blockly/blockly_compressed.js /script \n   script src= ../blockly/blocks_compressed.js /script \n   script src= ../blockly/arduino_compressed.js /script \n   !-- To use the uncompressed version comment out the above and comment in the ones below -- \n   !--script src= ../blockly/blockly_uncompressed.js /script \n   script src= ../blockly/blocks/logic.js /script \n   script src= ../blockly/blocks/loops.js /script \n   script src= ../blockly/blocks/math.js /script \n   script src= ../blockly/blocks/text.js /script \n   script src= ../blockly/blocks/lists.js /script \n   script src= ../blockly/blocks/colour.js /script \n   script src= ../blockly/blocks/variables.js /script \n   script src= ../blockly/blocks/procedures.js /script \n   script src= ../blockly/blocks/arduino/io.js /script \n   script src= ../blockly/blocks/arduino/map.js /script \n   script src= ../blockly/blocks/arduino/procedures.js /script \n   script src= ../blockly/blocks/arduino/serial.js /script \n   script src= ../blockly/blocks/arduino/servo.js /script \n   script src= ../blockly/blocks/arduino/spi.js /script \n   script src= ../blockly/blocks/arduino/stepper.js /script \n   script src= ../blockly/blocks/arduino/time.js /script \n   script src= ../blockly/blocks/arduino/tone.js /script \n   script src= ../blockly/blocks/arduino/variables.js /script \n   script src= ../blockly/generators/arduino.js /script \n   script src= ../blockly/generators/arduino/boards.js /script \n   script src= ../blockly/generators/arduino/io.js /script \n   script src= ../blockly/generators/arduino/lists.js /script \n   script src= ../blockly/generators/arduino/logic.js /script \n   script src= ../blockly/generators/arduino/loops.js /script \n   script src= ../blockly/generators/arduino/map.js /script \n   script src= ../blockly/generators/arduino/math.js /script \n   script src= ../blockly/generators/arduino/procedures.js /script \n   script src= ../blockly/generators/arduino/serial.js /script \n   script src= ../blockly/generators/arduino/servo.js /script \n   script src= ../blockly/generators/arduino/spi.js /script \n   script src= ../blockly/generators/arduino/stepper.js /script \n   script src= ../blockly/generators/arduino/text.js /script \n   script src= ../blockly/generators/arduino/time.js /script \n   script src= ../blockly/generators/arduino/tone.js /script \n   script src= ../blockly/generators/arduino/variables.js /script--   To:     !-- Ardublockly - These three files contain the compress version -- \n   !--script src= ../blockly/blockly_compressed.js /script \n   script src= ../blockly/blocks_compressed.js /script \n   script src= ../blockly/arduino_compressed.js /script-- \n   !-- To use the uncompressed version comment out the above and comment in the ones below -- \n   script src= ../blockly/blockly_uncompressed.js /script \n   script src= ../blockly/blocks/logic.js /script \n   script src= ../blockly/blocks/loops.js /script \n   script src= ../blockly/blocks/math.js /script \n   script src= ../blockly/blocks/text.js /script \n   script src= ../blockly/blocks/lists.js /script \n   script src= ../blockly/blocks/colour.js /script \n   script src= ../blockly/blocks/variables.js /script \n   script src= ../blockly/blocks/procedures.js /script \n   script src= ../blockly/blocks/arduino/io.js /script \n   script src= ../blockly/blocks/arduino/map.js /script \n   script src= ../blockly/blocks/arduino/procedures.js /script \n   script src= ../blockly/blocks/arduino/serial.js /script \n   script src= ../blockly/blocks/arduino/servo.js /script \n   script src= ../blockly/blocks/arduino/spi.js /script \n   script src= ../blockly/blocks/arduino/stepper.js /script \n   script src= ../blockly/blocks/arduino/time.js /script \n   script src= ../blockly/blocks/arduino/tone.js /script \n   script src= ../blockly/blocks/arduino/variables.js /script \n   script src= ../blockly/generators/arduino.js /script \n   script src= ../blockly/generators/arduino/boards.js /script \n   script src= ../blockly/generators/arduino/io.js /script \n   script src= ../blockly/generators/arduino/lists.js /script \n   script src= ../blockly/generators/arduino/logic.js /script \n   script src= ../blockly/generators/arduino/loops.js /script \n   script src= ../blockly/generators/arduino/map.js /script \n   script src= ../blockly/generators/arduino/math.js /script \n   script src= ../blockly/generators/arduino/procedures.js /script \n   script src= ../blockly/generators/arduino/serial.js /script \n   script src= ../blockly/generators/arduino/servo.js /script \n   script src= ../blockly/generators/arduino/spi.js /script \n   script src= ../blockly/generators/arduino/stepper.js /script \n   script src= ../blockly/generators/arduino/text.js /script \n   script src= ../blockly/generators/arduino/time.js /script \n   script src= ../blockly/generators/arduino/tone.js /script \n   script src= ../blockly/generators/arduino/variables.js /script   Keep in mind that any additional block file would have to to be added as a new  script  import.  Also remember to do hard refresh in-between changes to ensure your browser is not using cached old versions of the JavaScript files.",
            "title": "Runninng Uncompressed Ardublockly Blockly"
        },
        {
            "location": "/Git-Settings/",
            "text": "Git Settings\n\n\nThis page lists the general git settings used to maintain this repository. Not everything described here needs to be configured for local development, but it might be useful to at least be aware of the general git work-flow used.\n\n\nBranches\n\n\nThere are 2 permanent branches used, any other branch would be a feature branch meant to be merged into master once it is finished.\n\n\nmaster branch\n\n\nWhere the latest working version of the Ardublockly source code resides.\n\n\ngh-pages branch\n\n\nThe project pages branch \nhttp://carlosperate.github.io/ardublockly/\n contains a general project introduction page and an offers online accessibility to the Ardublockly front end web-based part of the application \nhttp://carlosperate.github.io/ardublockly/demo/\n (that redirects to \nhttp://ardublockly.embeddedlog.com/demo/\n) .\n\n\n[branch \ngh-pages\n]\n    remote = origin\n    merge = refs/heads/gh-pages\n\n\n\n\nRemotes\n\n\nblockly\n\n\nThe \nblockly\n remote points at the Google's Blockly repository, so that the latest updates can be pulled in.\n\n\nYou can add this remote repository using the following git command:\n\n\ngit remote add -f blockly https://github.com/google/blockly.git\n\n\n\n\nWhich should result in the following git configuration entry:\n\n\n[remote \nblockly\n]\n    url = https://github.com/google/blockly.git\n    fetch = +refs/heads/*:refs/remotes/blockly/*\n\n\n\n\nDepreciated SVN upstream\n\n\nOriginally the Blockly repository was hosted in Googlecode using Subversion. It has since moved to Github, so this part of the git configuration is not longer relevant.\n\n\n[svn-remote \nsvn\n]\n    url = http://blockly.googlecode.com/svn/\n    fetch = trunk:refs/remotes/trunk\n    branches = branches/*:refs/remotes/*\n    tags = tags/*:refs/remotes/tags/*\n\n\n\n\nGit Subtrees\n\n\nThere is a single subtree in this repository to contain a fork of Google's Blockly. This fork contains additional features, as part of Ardublockly, that need to be maintained.\n\n\nOnce the \nblockly\n remote is added, to pull the latest updates the following commands can be used from the project root directory:\n\n\ngit fetch blockly master\ngit subtree pull --prefix blockly blockly master\n\n\n\n\nGit Submodules\n\n\nThere are two submodules as part of this repository, the \nGoogle's Closure library\n and the \nArdublockly GitHub Wiki\n repository.\n\n\nTo initialise the modules after a git clone the following command should be executed. From the project root directory:\n\n\ngit submodule update --init --recursive",
            "title": "Git Settings"
        },
        {
            "location": "/Git-Settings/#git-settings",
            "text": "This page lists the general git settings used to maintain this repository. Not everything described here needs to be configured for local development, but it might be useful to at least be aware of the general git work-flow used.",
            "title": "Git Settings"
        },
        {
            "location": "/Git-Settings/#branches",
            "text": "There are 2 permanent branches used, any other branch would be a feature branch meant to be merged into master once it is finished.",
            "title": "Branches"
        },
        {
            "location": "/Git-Settings/#master-branch",
            "text": "Where the latest working version of the Ardublockly source code resides.",
            "title": "master branch"
        },
        {
            "location": "/Git-Settings/#gh-pages-branch",
            "text": "The project pages branch  http://carlosperate.github.io/ardublockly/  contains a general project introduction page and an offers online accessibility to the Ardublockly front end web-based part of the application  http://carlosperate.github.io/ardublockly/demo/  (that redirects to  http://ardublockly.embeddedlog.com/demo/ ) .  [branch  gh-pages ]\n    remote = origin\n    merge = refs/heads/gh-pages",
            "title": "gh-pages branch"
        },
        {
            "location": "/Git-Settings/#remotes",
            "text": "",
            "title": "Remotes"
        },
        {
            "location": "/Git-Settings/#blockly",
            "text": "The  blockly  remote points at the Google's Blockly repository, so that the latest updates can be pulled in.  You can add this remote repository using the following git command:  git remote add -f blockly https://github.com/google/blockly.git  Which should result in the following git configuration entry:  [remote  blockly ]\n    url = https://github.com/google/blockly.git\n    fetch = +refs/heads/*:refs/remotes/blockly/*",
            "title": "blockly"
        },
        {
            "location": "/Git-Settings/#depreciated-svn-upstream",
            "text": "Originally the Blockly repository was hosted in Googlecode using Subversion. It has since moved to Github, so this part of the git configuration is not longer relevant.  [svn-remote  svn ]\n    url = http://blockly.googlecode.com/svn/\n    fetch = trunk:refs/remotes/trunk\n    branches = branches/*:refs/remotes/*\n    tags = tags/*:refs/remotes/tags/*",
            "title": "Depreciated SVN upstream"
        },
        {
            "location": "/Git-Settings/#git-subtrees",
            "text": "There is a single subtree in this repository to contain a fork of Google's Blockly. This fork contains additional features, as part of Ardublockly, that need to be maintained.  Once the  blockly  remote is added, to pull the latest updates the following commands can be used from the project root directory:  git fetch blockly master\ngit subtree pull --prefix blockly blockly master",
            "title": "Git Subtrees"
        },
        {
            "location": "/Git-Settings/#git-submodules",
            "text": "There are two submodules as part of this repository, the  Google's Closure library  and the  Ardublockly GitHub Wiki  repository.  To initialise the modules after a git clone the following command should be executed. From the project root directory:  git submodule update --init --recursive",
            "title": "Git Submodules"
        },
        {
            "location": "/Create-Blocks-~-Extending-Ardublockly/",
            "text": "(This is a stub of the documentation for the functionality included to easily extend Ardublockly to support new blocks)\n\n\n(Introductory paragraph should go here)\n\n\n(Top view description of the extensibility options should go here)\n\n\nAdding Pin Types\n\n\n(this has not yet been implemented)\n\n\nBlockly.Arduino.PinTypes.add('PIN_NAME');\n\n\n\n\nAdding a new Data Types\n\n\nBlockly.Types.addType(typeName, basicType, compatibleTypes)\n\n\n\n\n\n\ntypeName\n: An String to identify the name of the type.\n\n\nbasicType\n: A \nBlockly.Type.BasicTypes\n object that defined its basic type\n\n\ncompatibleTypes\n: An array of \nBlockly.Type.Types\n that this Type can be compatible with.\n\n\n\n\n(Add a note about how compatibility does not go both ways, e.g. a block that takes a Number can also take a compatible boolean, but a block that takes a boolean does not necessarily take a Number)\n\n\nExtend other blocks to have a new block as compatible: \n(Not yet implemented)\n\n\nBlockly.Types.addAsCompatible(originType, compatibleType)\n\n\n\n\n\n\noriginType\n: A \nBlockly.Type.Types\n for which to extend its compatibility list.\n\n\ncompatibleType\n: The \nBlockly.Type.Types\n to add as compatible.\n\n\n\n\nBasic Type\n\n\n(Explain that a basic type is the most fundamental \"type unit\", so a new basic type should not be something that could be \"derived\" from an existing one. For example, a \"long integer\" is a type of \nNUMBER\n so a new \nType\n for that should be created instead of a new \"basic type\", and a \"colour\" cannot be represented by any of the current basic types, so it should create its own.)\n\n\nCurrent basic types:\n\n\nBlockly.Type.BasicTypes.TEXT      // General text string type\nBlockly.Type.BasicTypes.BOOLEAN   // Can only have two values, generally 0 for false, or 1 for true\nBlockly.Type.BasicTypes.NUMBER    // A general number type\nBlockly.Type.BasicTypes.DECIMAL   // Number type for numbers with a fractional part\nBlockly.Type.BasicTypes.ARRAY     // Array of any type of items\nBlockly.Type.BasicTypes.COLOUR    // For the colour blocks, not used in Ardublockly\nBlockly.Type.BasicTypes.NULL      // Used as a \nno type\n wild card natively\nBlockly.Type.BasicTypes.UNDEF     // Can be used to delegate type assignment\n\n\n\n\nAdd a new Basic Type: \n(Not yet implemented)\n\n\nBlockly.Types.addBasicType('TYPE_NAME')",
            "title": "Extending Ardublockly"
        },
        {
            "location": "/Create-Blocks-~-Extending-Ardublockly/#adding-pin-types",
            "text": "(this has not yet been implemented)  Blockly.Arduino.PinTypes.add('PIN_NAME');",
            "title": "Adding Pin Types"
        },
        {
            "location": "/Create-Blocks-~-Extending-Ardublockly/#adding-a-new-data-types",
            "text": "Blockly.Types.addType(typeName, basicType, compatibleTypes)   typeName : An String to identify the name of the type.  basicType : A  Blockly.Type.BasicTypes  object that defined its basic type  compatibleTypes : An array of  Blockly.Type.Types  that this Type can be compatible with.   (Add a note about how compatibility does not go both ways, e.g. a block that takes a Number can also take a compatible boolean, but a block that takes a boolean does not necessarily take a Number)  Extend other blocks to have a new block as compatible:  (Not yet implemented)  Blockly.Types.addAsCompatible(originType, compatibleType)   originType : A  Blockly.Type.Types  for which to extend its compatibility list.  compatibleType : The  Blockly.Type.Types  to add as compatible.",
            "title": "Adding a new Data Types"
        },
        {
            "location": "/Create-Blocks-~-Extending-Ardublockly/#basic-type",
            "text": "(Explain that a basic type is the most fundamental \"type unit\", so a new basic type should not be something that could be \"derived\" from an existing one. For example, a \"long integer\" is a type of  NUMBER  so a new  Type  for that should be created instead of a new \"basic type\", and a \"colour\" cannot be represented by any of the current basic types, so it should create its own.)  Current basic types:  Blockly.Type.BasicTypes.TEXT      // General text string type\nBlockly.Type.BasicTypes.BOOLEAN   // Can only have two values, generally 0 for false, or 1 for true\nBlockly.Type.BasicTypes.NUMBER    // A general number type\nBlockly.Type.BasicTypes.DECIMAL   // Number type for numbers with a fractional part\nBlockly.Type.BasicTypes.ARRAY     // Array of any type of items\nBlockly.Type.BasicTypes.COLOUR    // For the colour blocks, not used in Ardublockly\nBlockly.Type.BasicTypes.NULL      // Used as a  no type  wild card natively\nBlockly.Type.BasicTypes.UNDEF     // Can be used to delegate type assignment  Add a new Basic Type:  (Not yet implemented)  Blockly.Types.addBasicType('TYPE_NAME')",
            "title": "Basic Type"
        },
        {
            "location": "/FAQs/",
            "text": "FAQs\n\n\nThis is a place holder page, the Frequently Asked Questions will be coming soon\n\n\nIf you have an urgency to use this part of the documentation, please \ncreate a new an issue\n and I will prioritise it\n.",
            "title": "FAQs"
        },
        {
            "location": "/FAQs/#faqs",
            "text": "This is a place holder page, the Frequently Asked Questions will be coming soon  If you have an urgency to use this part of the documentation, please  create a new an issue  and I will prioritise it .",
            "title": "FAQs"
        },
        {
            "location": "/About/",
            "text": "About\n\n\nThis is a place holder page, the About page will be coming soon\n\n\nIf you have an urgency to use this part of the documentation please \ncreate a new an issue\n and I will prioritise it.",
            "title": "About Ardublocly"
        },
        {
            "location": "/About/#about",
            "text": "This is a place holder page, the About page will be coming soon  If you have an urgency to use this part of the documentation please  create a new an issue  and I will prioritise it.",
            "title": "About"
        },
        {
            "location": "/License/",
            "text": "License\n\n\nThis projects is copyright (c) 2016 carlosperate https://github.com/carlosperate/\n\n\nUnless stated otherwise, the source code of this projects is\nlicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use any of the licensed files within this project\nexcept in compliance with the License.\n\n\nYou may obtain a copy of the License at:\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
            "title": "License"
        },
        {
            "location": "/License/#license",
            "text": "This projects is copyright (c) 2016 carlosperate https://github.com/carlosperate/  Unless stated otherwise, the source code of this projects is\nlicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use any of the licensed files within this project\nexcept in compliance with the License.  You may obtain a copy of the License at:  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.                                Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n    License  shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n    Licensor  shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n    Legal Entity  shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n    control  means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n    You  (or  Your ) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n    Source  form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n    Object  form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n    Work  shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n    Derivative Works  shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n    Contribution  shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition,  submitted \n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as  Not a Contribution. \n\n    Contributor  shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a  NOTICE  text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an  AS IS  BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
            "title": "License"
        },
        {
            "location": "/Credits/",
            "text": "Credits\n\n\nThis is a place holder page, the Credits will be coming soon\n\n\nIf you have an urgency to use this part of the documentation, please \ncreate a new an issue\n and I will prioritise it\n.",
            "title": "Credits"
        },
        {
            "location": "/Credits/#credits",
            "text": "This is a place holder page, the Credits will be coming soon  If you have an urgency to use this part of the documentation, please  create a new an issue  and I will prioritise it .",
            "title": "Credits"
        }
    ]
}